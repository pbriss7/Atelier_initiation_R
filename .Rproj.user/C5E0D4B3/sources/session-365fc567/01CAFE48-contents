---
title: "Atelier 1: le studio"
author: "Pascal Brissette"
format: pdf
editor: visual
---

![Crédit photographique: Matthieu Comoy, Unsplash](images/matthieu-comoy-koo_vYrlU_U-unsplash.jpg){fig-alt="https://unsplash.com/photos/koo_vYrlU_U"}

##### Cet atelier propose une initiation à l'environnement RStudio et aux commandes de base du langage R. Il est destiné aux personnes n'ayant aucune formation en programmation. Les concepts et fonctions qu'on y présente pourront paraître a priori éloignés de l'analyse de texte, mais ils y conduisent! Prenez le temps de vous familiariser avec votre environnement de travail et les fonctions de base.

## RStudio: environnement de travail et d'expérimentation

Votre lieu de travail est RStudio, dont le nom changera prochainement pour [Posit](%22https://www.rstudio.com/blog/rstudio-is-becoming-posit/#:~:text=RStudio%20is%20becoming%20Posit%20%2D%20RStudio&text=Today%20we%20are%20very%20excited,this%20and%20what%20it%20means.%22). La version locale de RStudio suppose l'installation préalable de [R](%22https://cran.r-project.org/%22) et de [RStudio](%22https://www.rstudio.com/products/rstudio/download/%22). Comme les raccourcis peuvent varier selon le système d'exploitation de l'ordinateur, nous allons, par souci de simplicité, utiliser la version "Cloud" de RStudio, [RStudio Cloud](%22https://rstudio.cloud/%22).

Une fois dans votre environnement de travail, vous ouvrirez le volet Enseignement, qui vous a été partagé, et le projet "FREN 498 Ateliers et exercices". Vous devriez alors voir une fenêtre ressemblant à celle-ci:

## ![](images/RStudioCloud.jpg)

Vous pouvez alors ouvrir le fichier intitulé \`Atelier 1.qmd\`, qui contient le présent script.

## Exécuter ou ne pas exécuter les commandes...

Dans un script R, les caractères qui suivent un croisillon `#` ne sont pas exécutés. Vous pouvez donc vous servir de ce symbole pour insérer des titres ou des commentaires dans votre script.

Il est toujours recommandé de commenter votre code, d'indiquer ce que les lignes de commandes sont supposées donner, ce que vous souhaitez faire. Ces commentaires vous seront utiles lorsque, quelques jours, semaines ou mois plus tard, vous reprendrez le travail ou souhaiterez vous en inspirer pour créer une autre tâche. En cas de pépin ou de blocage ("troubleshooting"), ces commentaires indiqueront aux personnes qui vous aident quelle logique vous avez suivie.

```{r}
# La présente ligne ne sera pas exécutée, car elle est précédée du croisillon.

getwd() #La commande précédente sera exécutée, mais non ce commentaire.

# Que semble produire la fonction que vous venez d'exécuter? Dans quel contexte pourriez-vous devoir l'utiliser?
```

Dans un script R de base, le résultat de la commande n'apparaît que dans la fenêtre "Console". Dans un document Quarto comme celui-ci, le résultat apparaît également sous les lignes de code ("code chunk").

Pour exécuter une commande, vous pouvez, dans un document Quarto, cliquer sur la flèche à la droite de la fenêtre de code ou encore mettre votre curseur au début de la ligne de code et utiliser le raccourci `Command+Enter`.

```{r}
#| echo: true
2 * 2 # Exécuter cette ligne de code avec le raccourci.
```

## Obtenir de l'aide

À tout moment, sans même sortir de l'environnement de travail, on peut obtenir de l'aide sur une fonction en particulier ou sur une extension ("package").

### Documentation sur les extensions

| Pour illustrer le travail avec les extensions, nous utilserons `proustr`, créé par Colin Fay en 2017. Cette extension contient les sept romans composant la Recherche du temps perdu de Marcel Proust, ainsi que la liste de tous les personnages de la Recherche et des fonctions permettant par exemple de choisir des citations au hasard.

On peut obtenir de l'aide sur une extension une fois qu'elle a été installée (si elle ne l'est pas déjà) et activée (ce sont des opérations distinctes). Pour installer une extension, on utilise la fonction `install.packages("...")`, et pour activer la même extension, on utilise la fonction `library()`. Quant à la documentation de l'extension, elle sera appelée par la fonction `help(package="...")`. Elle apparaîtra dans la fenêtre inférieure droite de RStudio, sous l'onglet "Help".

**Note**: pour éviter les messages d'erreur, n'oubliez pas de mettre le nom de l'extension entre guillemets lorsque vous l'installez. Une fois installée, cette extension devient un objet et peut donc être appelée par son nom d'objet, sans guillemets.

**Rappel**: vous trouverez toutes les extensions approuvées par l'équipe de RStudio sur [CRAN("Comprehensive R Archive Network")](%22https://cran.r-project.org/%22). Il y en a plus de 18 000 en ce mois d'août 2022.

```{r}
#| echo: true

install.packages("proustr") # Installation d'une extension

library(proustr) # Activation d'une extension

help(package="proustr")

??proustr # Ce raccourci produit un résultat similaire

```

Disons-le tout de suite: la documentation a un aspect assez austère. Lorsque vous maîtriserez bien vos outils, vous apprécierez ces présentations directes, sans flafla. Pour un premier contact avec une extension, il vaut mieux consulter les vignettes ou les aide-mémoire ("cheat sheet"). Les liens vers les vignettes se trouvent en tête de la documentation. Quant aux aide-mémoire, votre moteur de recherche préféré vous y conduira aisément (exemple de recherche: "proustr cheat sheet").

Pour obtenir de l'aide sur une fonction en particulier, on écrit son nom précédé d'un point d'interrogation.

```{r}
#| echo: true

?proust_random() # Ce raccourci produit un résultat similaire

proust_random(count = 2) # Essayez cette fonction
```

### Créer ses premiers objets

Dans R, tout est un objet dont on peut voir et explorer le contenu, qu'on peut manipuler et modifier. Les fonctions que vous créerez, les calculs que vous ferez, les graphiques que vous produirez, tout pourra être encapsulé dans des "conteneurs" et devenir un objet nommé. À tout moment, vous pouvez obtenir la liste de vos objets avec la fonction `ls()`. Dans RStudio, ces derniers sont rassemblés dans la fenêtre supérieure droite, sous l'onglet (par défaut) Environnement.

Pour créer un objet, on utilise l'opérateur `<-`. Cet opérateur prend la forme d'une flèche; il associe à la chaine de caractères à sa gauche le résultat de la ligne de commande qui se trouve à sa droite.

```{r}
#| echo: true

# La fonction proust_random() renvoie une citation aléatoire 
# tirée de La Recherche du temps perdu de Proust. 

citation_proust_1 <- proust_random(2) # Création d'un premier objet
citation_proust_2 <- proust_random(5) # Création d'un deuxième objet

ls()

# Par convention, on utilise l'opérateur <- pour les assignations et le symbole `=` pour définir les arguments d'une fonction, mais les deux fonctionnent pour l'assignation. on peut même utiliser la flèche inverse `->` en prenant soin de permuter commandes et nom d'objet.

```

Pour composer le nom d'un objet et pouvoir l'inscrire dans l'environnement de travail, on peut utiliser un mélange de lettres et de chiffres. Il faut cependant éviter:

-   de placer un chiffre en début de ligne

-   d'utiliser des lettres accentuées et des espaces

-   d'utiliser, comme nom d'objet, des noms de fonctions existantes (ex.: length, dim, apply).

Enfin, vous utiliserez idéalement des noms qui traduisent au mieux le contenu de l'objet.

## Les principaux types d'objets

Les deux objets que nous avons créés dans la section précédente sont des vecteurs de longueur 1. Il ne faut pas confondre la longueur de la chaîne de caractères et la longueur de la structure de données (ici un vecteur). Le nombre de caractères d'une chaîne peut être obtenue avec la fonction `nchar()`, tandis que la longueur de l'objet est obtenu avec `length()`.

```{r}

nchar(citation_proust_1)
length(citation_proust_1)

```

Le vecteur est l'unité de base de R, la structure de données élémentaire. Toutes les autres sont construites à partir de vecteurs. Il est donc essentiel de savoir les explorer et les manipuler.

Le vecteur peut être comparé à un dossier (une "chemise") qui ne pourrait contenir qu'un seul type de document (photo OU documents écrits OU feuille de calcul, etc.). Il s'agit d'une structure de données homogène ou, pour utiliser le vocabulaire courant, « atomique ». Si vous essayez de concaténer des données de divers types, R forcera leur homogénéisation. Les deux objets que nous avons créés sont de type `character`, tandis que la fonction reprise de l'extension proustr est de type... `function`.

```{r}

mode(citation_proust_1)

mode(proust_random) # Les fonctions sont aussi des objets dans R et, à ce titre, ils possèdent leur propre structure et type

```

On peut joindre des vecteurs de même type avec la fonction `c()` ("c" pour "concatenate") et les assigner à un nouvel objet:

```{r}

citation_proutst1_2 <- c(citation_proust_1, citation_proust_2)

citation_proutst1_2 # Observer le résultat

length(citation_proutst1_2)

```

La fonction `length()` indique que le nouvel objet comprend deux éléments. Ceux-ci peuvent être isolés ou indexés à l'aide des crochets `[]`, placé immédiatement après le nom de l'objet. On indiquera dans le crochet l'indice de l'élément qu'on souhaite observer ou manipuler.

```{r}

citation_proutst1_2[2] # Indexation du deuxième élément du vecteur

```

On peut ajouter au vecteur autant d'éléments que l'on souhaite en utilisant la fonction `append()` ou `c()`.

```{r}

length(citation_proutst1_2) # Vérification du nombre d'éléments du vecteur

citation3 <- proust_random(1) # Nouvelle citation
citation4 <- proust_random(1) # Nouvelle citation

citation_proutst1_2 <- c(citation_proutst1_2, citation3) # Combinaison 1

length(citation_proutst1_2)

citation_proutst1_2 <- append(citation_proutst1_2, citation4)
  
length(citation_proutst1_2)

```

On peut attribuer des noms aux éléments d'un vecteur. Cela permettra ultérieurement d'indexer l'élément à partir de ce nom au lieu d'avoir à utiliser son indice (position dans le vecteur).

```{r}

names(citation_proutst1_2) <- c("Citation1", "Citation2", "Citation3", "Citation4") # Attribution de noms

str(citation_proutst1_2) # La fonction str() indique que les éléments du vecteur
                         # sont pourvus d'un attribut "names"

citation_proutst1_2["Citation1"] # Indexation de l'élément grâce au nom

```

Si on souhaite éliminer ou remplacer un élément du vecteur, on l'isole avec son indice ou son nom, et on assigne à cet indice une nouvelle modalité.

```{r}

citation_proutst1_2[1] <- proust_random(1)

citation_proutst1_2["citation1"] <- "test"

```

R contient, dès son chargement, une multitude de vecteurs prêts à être utilisés. L'objet `letters`, par exemple, est un vecteur contenant 26 éléments (je vous laisse deviner lesquels).

```{r}
letters
length(letters)
```

Chaque lettre de ce vecteur est isolée des autres, comme le montrent les guillemets encadrant chaque élément. On pourrait --- et c'est une chose que vous ferez sur une base régulière --- assembler ces éléments en une seule chaîne de caractères. Cela se fait avec la fonction `paste()`. Cette fonction prend comme arguments une série de vecteurs à assembler `(...)`, un séparateur entre les vecteurs à assembler `sep =`, ainsi qu'une option d'amalgame des éléments de ces vecteurs `collapse =`. Essayez cette fonction avec le vecteur `letters` ou avec `citation_proutst1_2`.

```{r}

paste(letters,letters, sep = "---")
paste(letters, collapse = " ")
paste(letters,letters, sep = "---", collapse = " ")

```

## Nettoyage de l'environnement de travail

Avant de passer au défi, nettoyons l'environnement de travail. C'est une chose que nous devons souvent faire pour éviter l'accumulation d'objets inutiles et l'encombrement de la mémoire. Le nettoyage peut être complet ou sélectif. Voyez ci-dessous:

```{r}

rm(list=setdiff(ls(), "citation_proust_1")) # Élimination de tous les objets, à l'exception de `citation_proust_1`

rm(list=ls()) # Élimination de tous les objets de l'environnement

gc() # Permet de libérer l'espace mémoire non utilisée

```

## Petit défi

1.  Assignez à cinq objets différents une citation aléatoire de Proust composée chacune d'une seule phrase;

2.  Créez un objet de longueur 5 avec ces cinq vecteurs atomiques;

3.  Amalgamez (collez) le premier et le dernier élément de ce vecteur, en les séparant avec une série d'astérisques `*******`.

4.  Faites une copie du vecteur `letters`\`.

5.  Utilisez l'indexation et la fonction `paste()` pour former le mot "abc".

## Pour aller plus loin

Colin Fay, [ProustR](%22https://github.com/cran/proustr%22)

Vincent Goulet, David Beauchemin et Samuel Cabral Cruz [Introduction à R](%22https://vigou3.github.io/raquebec-atelier-introduction-r/%22)

Sophie Baillargeon, [Présentation de R](%22https://stt4230.rbind.io/introduction/presentation_r/%22)

[Stack Overflow](%22https://stackoverflow.com/%22)
