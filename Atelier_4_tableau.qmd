---
title: "Atelier 4: le tableau de données"
author: "Pascal Brissette (U. McGill)"
date: 10 septembre 2022
format: pdf
editor: visual
---

[![Crédit photographique: R for Social Scientists, Data Carpentry](images/data-frame.png){fig-align="center" width="580"}](https://datacarpentry.org/r-socialsci/02-starting-with-data/index.html)

## Le tableau de données

Un tableau de données en R, aussi appelé data frame, est semblable à une feuille Excel : c’est une structure rectangulaire où chaque colonne contient un type de données (comme des nombres, du texte, ou des catégories). Les lignes représentent des observations, et les colonnes sont des variables. Un tableau peut contenir plusieurs types de données dans ses colonnes, mais chaque colonne doit être homogène, c’est-à-dire qu’elle ne peut contenir qu’un seul type de données (par exemple, une colonne ne peut contenir à la fois des chiffres et du texte).

### Créer un tableau de données

Un tableau de données peut être créé à partir de vecteurs (des listes d’éléments) à l’aide de la fonction data.frame(). Chaque vecteur deviendra une colonne dans le tableau.

```{r}
# Création d'un tableau de données comprenant des noms d'auteur.trices, des titres
# d'oeuvres et des années de parution
ouvrages <- data.frame(auteur.trice = c("Mercier", "Stael", "Hugo", "Sand", "Zola"),
                       oeuvre = c("Tableau de Paris", "Corinne",
                                  "Les Misérables", "Maupras", "La Débâcle"),
                       annee.publication = c(1781L, 1807L, 1862L, 1837L, 1892L),
                       est.femme = c(FALSE, TRUE, FALSE, TRUE, FALSE))

print(ouvrages)
```

### Extraire des éléments d'un tableau de données.

Les lignes d’un tableau de données sont appelées observations, et les colonnes, variables. Vous pouvez extraire des éléments spécifiques du tableau en utilisant les positions des lignes et colonnes, comme ceci :

```{r}

ouvrages[1,2] # On extrait l'élément au croisement de la ligne 1 et de la colonne 2

ouvrages[c(1,2), c(3)] # On extrait les éléments au croisement des lignes 1 et 2, et de la colonne 3

ouvrages[ ,1:3] # On extrait toutes les valeurs de la première ligne, pour les colonnes 1 à 3.

ouvrages[1,] # On extrait TOUS les éléments de la première ligne
```

Vous pouvez aussi accéder à une colonne spécifique en utilisant son nom avec l'opérateur $ :

```{r extraction}

# Extraction de toutes les valeurs de la colonne `auteur.trice`
ouvrages$auteur.trice

# Extractiond e la valeur au croisement de la première ligne et de la colonne `oeuvre`
ouvrages$oeuvre[1]

# Extraction des trois premières valeurs de la colonne `est.femme`
ouvrages$est.femme[1:3]

```

### Ajouter des colonnes à un tableau de données

Pour ajouter une nouvelle colonne à un tableau, il suffit d’assigner un vecteur à une nouvelle colonne :

```{r ajout-colonne}

# Ajout d'une cinquième colonne au tableau, qui en comporte 4 pour l'instant
ouvrages[,5] <- c("Littérature panoramique", "roman", "roman", "roman", "roman")

# On observe le résultat
str(ouvrages)

# Par défaut, R a donné le nom `V5` à notre colonne. On peut lui en attribuer un qui soit plus élégant
colnames(ouvrages)[ncol(ouvrages)] <- "genre.litteraire"

# On observe le résultat
str(ouvrages)

print(ouvrages)
```

### Ajouter des lignes à un tableau de données

L’ajout d’une nouvelle ligne est un peu plus complexe car chaque colonne peut contenir des types de données différents. Vous pouvez ajouter une ligne en utilisant une liste pour regrouper les différentes données :

```{r ajout-ligne}
str(ouvrages)

ouvrages[6,] <- list("Rachilde", "La Marquise de Sade", 1887, TRUE, "roman")
ouvrages[7,] <- list("Louise Colet", "Les fleurs du midi", 1836, TRUE, "poésie")

ouvrages

```

On peut également ajouter une ligne à un tableau en utilisant la fonction `rbind()`. C'est une méthode plus simple que la précédente.

```{r ajout-ligne-rbind}

ouvrages <- rbind(ouvrages,
                  list("Lamartine", "Méditations poétiques", 1820, FALSE, "poésie"))

ouvrages
```

### Réorganiser les colonnes

Nous avons maintenant un tableau intéressant, mais les données ne sont pas aussi bien organisées qu'elles pourraient l'être. Par exemple, la variable qui fournit une information sur le genre de l'auteur.trice, `est.femme`, devrait apparaître tout juste après la variable `auteur.trice`, non entre `annee.publication` et `genre.litteraire`. Du côté des lignes, le principe le plus commun d'organisation, dans des tableaux de ce type, est chronologique. On pourrait donc ordonner les lignes en fonction des valeurs de la colonne `annee.publication`. 

La modification de l'ordre des colonnes peut se faire très simplement en fournissant un vecteur numérique indiquant le nouvel ordre proposé (les indices numériques correspondent, dans un tel vecteur, à la position de la colonne dans le tableau). Vous pouvez également fournir à R un vecteur comprenant les noms des colonnes selon l'ordre souhaité.

```{r réordonner-colonnes}

# Les deux opérations ci-dessous produisent le même résultat
ouvrages[, c(1, 4, 2, 3, 5)]
ouvrages[, c("auteur.trice", "est.femme", "oeuvre", "annee.publication", "genre.litteraire")]

# Si vous êtes satisfait.e.s de ce résultat, vous pouvez l'assigner à l'objet 
# et "écraser" la version antérieure par la nouvelle.

ouvrages <- ouvrages[, c("auteur.trice", "est.femme", "oeuvre", "annee.publication", "genre.litteraire")]

ouvrages
```

### Modifier l'ordre des lignes

Pour modifier l'ordre des lignes, le plus simple est de recourir à la fonction `order()` qui, comme son nom l'indique, établit un ordre dans un vecteur numérique.

```{r ordre-chronologique}

# Nous voulons ordonner les LIGNES du tableau en fonction de l'année de publication des oeuvres.

ouvrages[order(ouvrages$annee.publication),]

# Si cette présentation est conforme à ce que vous souhaitez obtenir, vous l'assignez à l'objet et écrasez la version antérieure.

ouvrages_chronologie <- ouvrages[order(ouvrages$annee.publication),]

```

Vous avez maintenant deux objets similaires, mais non identiques. Préserver différents états d'un même objet peut être utile dans certaines situations.

Nous allons enregistrer une copie du premier objet; il nous servira dans le prochain atelier. Pour un tableau de données, il est d'usage de l'enregistrer soit en format .RDS, qui est le format spécifique aux objets de R, soit en format .csv, si votre intention est par exemple de partager le tableau ou de l'utiliser dans d'autres logiciels.

```{r}

# La fonction `saveRDS()` prend deux principaux arguments: le nom de l'objet et le chemin.
saveRDS(ouvrages, "donnees/ouvrages.RDS")

# La fonction `write.csv()` prend deux arguments similaires
write.csv(ouvrages, "donnees/ouvrages.csv")
```

## Défi

1.  Ajoutez au tableau original une nouvelle colonne appelée `annee.naissance` et insérer les données appropriées.

2.  Déplacez cette nouvelle colonne entre les colonnes `auteur.trice` et `est.femme`.

3.  Ajoutez une ligne au tableau avec un.e auteur.trice.trice de votre choix.

4.  Organisez le tableau en fonction des modalités de la variable `est.femme` (utilisez la fonction `order()` pour cela).
