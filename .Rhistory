list.files() #La commande précédente sera exécutée, mais non ce commentaire.
# La présente ligne ne sera pas exécutée, car elle est précédée du croisillon.
list.files() #La commande précédente sera exécutée, mais non ce commentaire.
# Que semble produire la fonction que vous venez d'exécuter? Dans quel contexte pourriez-vous devoir l'utiliser?
list.files("/donnees") #La commande précédente sera exécutée, mais non ce commentaire.
list.files("donnees") #La commande précédente sera exécutée, mais non ce commentaire.
#| echo: true
2 * 2 # Exécuter cette ligne de code avec le raccourci.
```{r}
#| echo: true
2 * 2 # Exécuter cette ligne de code avec le raccourci.
2 * 2 # Exécuter cette ligne de code avec le raccourci.
install.packages("proustr") # Installation d'une extension
library(proustr) # Activation d'une extension
help(package="proustr")
??proustr # Ce raccourci produit un résultat similaire
proust_random(count = 2) # Essayez cette fonction
```{r}
citation_proust_1 <- proust_random(2) # Création d'un premier objet
citation_proust_2 <- proust_random(5) # Création d'un deuxième objet
ls()
nchar(citation_proust_1)
length(citation_proust_1)
mode(citation_proust_1)
mode(proust_random) # Les fonctions sont aussi des objets dans R et, à ce titre, ils possèdent leur propre structure et type
mode(citation_proust_1)
citation_proutst1_2 <- c(citation_proust_1, citation_proust_2)
print(citation_proutst1_2) # Observer le résultat
length(citation_proutst1_2)
length(citation_proutst1_2) # Vérification du nombre d'éléments du vecteur
citation3 <- proust_random(1) # Nouvelle citation
citation4 <- proust_random(1) # Nouvelle citation
citation_proutst1_2 <- c(citation_proutst1_2, citation3) # Combinaison 1
length(citation_proutst1_2)
citation_proutst1_2 <- append(citation_proutst1_2, citation4)
length(citation_proutst1_2)
names(citation_proutst1_2) <- c("Citation1", "Citation2", "Citation3", "Citation4") # Attribution de noms
str(citation_proutst1_2) # La fonction str() indique que les éléments du vecteur
citation_proutst1_2["Citation1"] # Extraction de l'élément grâce au nom
citation_proutst1_2[1] <- proust_random(1)
citation_proutst1_2["Citation1"] <- "test"
citation_proutst1_2 <- citation_proutst1_2[c(2,3)]
citation_proutst1_2[-c(2)]
mes_lettres <- letters
length(mes_lettres)
identical(mes_lettres, letters)
?paste
paste(letters,letters, sep = "---")
paste(letters, collapse = " ")
paste(letters,letters, sep = "---", collapse = " ")
rm(list=setdiff(ls(), "citation_proust_1")) # Élimination de tous les objets, à l'exception de `citation_proust_1`
rm(list=ls()) # Élimination de tous les objets de l'environnement
gc() # Permet de libérer l'espace mémoire non utilisée
library(proustr)
# Assignez à cinq objets différents une citation aléatoire de Proust composée chacune d'une seule phrase;
objet1 <- proust_random()
objet2 <- proust_random()
objet3 <- proust_random()
objet4 <- proust_random()
objet5 <- proust_random()
Objet_long <- c(objet1, objet2, objet3, objet4, objet5)
# Amalgamez (collez) le premier et le dernier élément de ce vecteur, en les séparant avec une série d'astérisques *******.
paste(Objet_long[1], Objet_long[5], collapse = "*******")
# Amalgamez (collez) le premier et le dernier élément de ce vecteur, en les séparant avec une série d'astérisques *******.
paste(Objet_long[1], Objet_long[5], sep = "*******")
# Faites une copie du vecteur letters`.
copie_lettres <- letters
# Utilisez l'indiçage et la fonction paste() pour former le mot "abc".
paste(copie_lettres[1], copie_lettres[2], copie_lettres[3])
# Utilisez l'indiçage et la fonction paste() pour former le mot "abc".
paste(copie_lettres[1], copie_lettres[2], copie_lettres[3], sep = "")
setwd("~/github/PERSONNEL/Ateliers/Ateliers_revises")
c(1,2,3)
paste(1,2,3, collapse = T)
paste(1,2, collapse = T)
paste(c(1,2), c(3,4), collapse = T)
paste(c(1,2), c(3,4))
?paste
c("Victor Hugo", "Louise Colet", "Alfred de Vigny", "Deslphine de Girardin")
ecrivains_XIX <- c("Victor Hugo", "Louise Colet", "Alfred de Vigny", "Deslphine de Girardin")
ecrivains_XIX
ecrivains_XIX[2]
factor(c("a", "b"))
class(factor(c("a", "b")))
typeof(factor(c("a", "b")))
mode(factor(c("a", "b")))
attributes(factor(c("a", "b")))
attributes(c("1"))
attributes(c(1,2,3))
typeof(c(1,2,3))
class(c(1,2,3))
class(c("a", "b"))
typeof(c("a", "b"))
